#include <stdlib.h>
#include <stdio.h>

struct Node {
    int data;
    struct Node *left, *right;
};

struct Node* createNode(int val)
{struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));
 newNode->data=val;
 newNode->left=NULL;
 newNode->right=NULL;
 return newNode;
}

struct Node *insertNode(struct Node* root, int val)
{if (root==NULL)
return createNode(val);

if (val<root->data)
{root->left=insertNode(root->left, val);}

else if (val>root->data)
{root->right=insertNode(root->right, val);}
}

void inorder(struct Node *root)
{if (root!=NULL)
 {inorder(root->left);
  printf("%d ->", root->data);
  inorder(root->right);}
}

void preorder(struct Node *root)
{if (root!=NULL)
 {printf("%d ->", root->data);
  preorder(root->left);
  preorder(root->right);
  }
}

void postorder(struct Node *root)
{if (root!=NULL)
 {postorder(root->left);
  postorder(root->right);
  printf("%d ->", root->data);
  }
}


int main()
{struct Node *root = NULL;
 root=insertNode(root, 50);
 insertNode(root, 60);
 insertNode(root,70);
 insertNode(root,55);
 insertNode(root, 40);
 insertNode(root, 30);
 insertNode(root, 45);
 printf("Traversing inorder \n");
 inorder(root);
 printf("\n");
 printf("Traversing preorder \n");
 preorder(root);
 printf("\n");
 printf("Traversing postorder \n");
 postorder(root);
 printf("\n");
 return 0;
 }
